package com.capstone.application.service.impl;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capstone.application.exception.PhysicianAvailabilityException;
import com.capstone.application.model.PhysicianAvailabiityModel;
import com.capstone.application.repository.DoctorInfoRepo;
import com.capstone.application.repository.PhysicianAvailabilityRepository;
import com.capstone.application.service.PhysicianAvailabilityService;

import kong.unirest.Unirest;
import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class PhysicianAvailabilityServiceImpl implements PhysicianAvailabilityService{

private PhysicianAvailabilityRepository physicianAvailabilityRepository;

@Autowired
private DoctorInfoRepo doctorInfoRepo;


public PhysicianAvailabilityServiceImpl(PhysicianAvailabilityRepository physicianAvailabilityRepository) {
super();
this.physicianAvailabilityRepository = physicianAvailabilityRepository;
}


private boolean setTodaysAvailbility(PhysicianAvailabiityModel physicianAvailabiity,String cstartDate,String cendDate) throws ParseException {


PhysicianAvailabiityModel model = null;

LocalDate timeNow=LocalDate.now();
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-YYYY");
        String today=formatter.format(timeNow).toString();



SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
Date currentDate=sdf.parse(today);
Date startdate = sdf.parse(cstartDate);  
Date enddate = sdf.parse(cendDate);
int sD=currentDate.compareTo(startdate);
int eD=currentDate.compareTo(enddate);





if(sD>=0 && eD<=0) {
return true;
}
else {
return false;
}


}

private void setTodaysAvailbilityForAll() throws ParseException {


PhysicianAvailabiityModel model = null;
boolean nullCheck=false;
List<PhysicianAvailabiityModel>l=physicianAvailabilityRepository.findAll();
for(PhysicianAvailabiityModel p:l) {
LocalDate timeNow=LocalDate.now();
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-YYYY");
        String today=formatter.format(timeNow).toString();
       
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
Date currentDate=sdf.parse(today);
Date startdate = sdf.parse(p.getStartDate());  
Date enddate = sdf.parse(p.getEndDate());
int sD=currentDate.compareTo(startdate);
int eD=currentDate.compareTo(enddate);
       
       
       
       

if(sD>=0 && eD<=0) {
p.setAvailability(true);
model=p;
}
else {
p.setAvailability(false);
model=p;
}

}
if(nullCheck==false) {
physicianAvailabilityRepository.save(model);
}

}


@Override
public List<PhysicianAvailabiityModel> findAll() throws PhysicianAvailabilityException {
//List<PhysicianAvailabiityModel>l=physicianAvailabilityRepository.findAll();
try {
setTodaysAvailbilityForAll();
} catch (ParseException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}

List<PhysicianAvailabiityModel>result=physicianAvailabilityRepository.findAll();
if(result.size()==0) {
throw new PhysicianAvailabilityException("No Values Present in the DataBase");
}

return result;

}

public PhysicianAvailabiityModel update(PhysicianAvailabiityModel physicianAvailabiity) throws PhysicianAvailabilityException {


PhysicianAvailabiityModel p=physicianAvailabiity;
List<PhysicianAvailabiityModel>l=physicianAvailabilityRepository.findAll();
for(PhysicianAvailabiityModel i:l) {
if(i.getPhysicianEmail().equals(physicianAvailabiity.getPhysicianEmail())) {
p=i;
break;

}
}

if(l.size()==0) {
throw new PhysicianAvailabilityException("No Avalability present with Email: "+physicianAvailabiity.getPhysicianEmail());

}

p.setStartDate(physicianAvailabiity.getStartDate());
p.setEndDate(physicianAvailabiity.getEndDate());


boolean val=true;
try {
val = setTodaysAvailbility(p,p.getStartDate(),p.getEndDate());
} catch (ParseException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
p.setAvailability(val);


PhysicianAvailabiityModel updateResponse = physicianAvailabilityRepository.save(p);
    return updateResponse;
}

@Override
public boolean deletePhysician(String physicianEmail) {
physicianAvailabilityRepository.deleteById(physicianEmail);
return true;
}















@Override
public List<PhysicianAvailabiityModel> findAllPhysicianOnDate(String date) throws ParseException {
// TODO Auto-generated method stub
List<PhysicianAvailabiityModel>allPhy=physicianAvailabilityRepository.findAll();
List<PhysicianAvailabiityModel>physicianOnThatDate=new ArrayList<>();
for(PhysicianAvailabiityModel physician:allPhy) {

SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
Date currentDate=sdf.parse(date);
Date startdate = sdf.parse(physician.getStartDate());  
Date enddate = sdf.parse(physician.getEndDate());
int sD=currentDate.compareTo(startdate);
int eD=currentDate.compareTo(enddate);

if(sD==1 && eD==-1) {
physicianOnThatDate.add(physician);
}


}

return physicianOnThatDate;
}

@Override
public Optional<PhysicianAvailabiityModel> findDoctorInfoByEmailId(String email) throws PhysicianAvailabilityException {
Optional<PhysicianAvailabiityModel> result=physicianAvailabilityRepository.findById(email);
if(result.isEmpty()) {
throw new PhysicianAvailabilityException("No Physician present with Email: "+email);
}
return result;
}


//Sangeeta
@Override
public long countDoctors() {
return physicianAvailabilityRepository.count();

}


}
